<%# app/views/users/edit_password.html.erb (or account/edit_password.html.erb) %>
<div class="pw-page">
  <div class="pw-card">
    <header class="pw-head">
      <h1>Passwort ändern</h1>
      <%= link_to "Zurück", account_path, class: "btn ghost" %>
    </header>

    <% if flash[:alert].present? %>
      <div class="form-errors"><%= flash[:alert] %></div>
    <% end %>

    <%= form_with url: update_password_account_path,
                  method: :patch,
                  local: true,
                  class: "nice-form" do |f| %>

      <div class="form-grid">
        <div class="form-group">
          <label for="cur_pw">Aktuelles Passwort</label>
          <%= f.password_field :current_password,
                id: "cur_pw",
                name: "user[current_password]",
                class: "input" %>
        </div>

        <div class="form-group">
          <div class="row-between">
            <label for="new_pw">Neues Passwort</label>
            <small class="muted">mind. 12 Zeichen</small>
          </div>
          <%= f.password_field :password,
                id: "new_pw",
                name: "user[password]",
                class: "input pw-input",
                autocomplete: "new-password" %>
          <div class="pw-meter" aria-hidden="true"><span></span></div>
        </div>

        <div class="form-group">
          <label for="new_pw_conf">Neues Passwort bestätigen</label>
          <%= f.password_field :password_confirmation,
                id: "new_pw_conf",
                name: "user[password_confirmation]",
                class: "input",
                autocomplete: "new-password" %>
        </div>
      </div>

      <div class="form-actions">
        <%= f.submit "Passwort speichern", class: "btn" %>
      </div>
    <% end %>
  </div>
</div>

<script>
document.addEventListener("turbo:load", () => {
  const input = document.querySelector(".pw-input");
  const bar   = document.querySelector(".pw-meter span");
  if (!input || !bar) return;

  const score = (v) => {
    let s = 0;
    if (!v) return 0;
    if (v.length >= 12) s++;
    if (/[A-Z]/.test(v)) s++;
    if (/[a-z]/.test(v)) s++;
    if (/\d/.test(v))    s++;
    if (/[^A-Za-z0-9]/.test(v)) s++;
    return Math.min(s, 5);
  };

  input.addEventListener("input", () => {
    const s = score(input.value);
    bar.style.width = `${(s/5)*100}%`;
  });
});
</script>
